function communication_init(obj)
    % communicate initial traffic and predictions message
    % synchronize the prioritized controllers in parallel/distributed execution
    %
    % INPUT:
    %   obj: handle of prioritized controller
    %

    % create struct with state indices that it is not created on every usage
    state_indices = indices();
    % measure vehicles' initial poses and trims
    [states_measured, trims_measured] = obj.plant.measure(obj.mpa);

    for vehicle_index = obj.plant.indices_in_vehicle_list
        % store state and trim in iteration data
        obj.iter.x0(vehicle_index, :) = states_measured(vehicle_index, :);
        obj.iter.trim_indices(vehicle_index) = trims_measured(vehicle_index);

        % calculate predicted lanelets
        predicted_lanelets = get_predicted_lanelets( ...
            obj.scenario, ...
            obj.mpa, ...
            obj.iter, ...
            vehicle_index, ...
            states_measured(vehicle_index, state_indices.x), ...
            states_measured(vehicle_index, state_indices.y) ...
        );

        % get vehicle size
        length = obj.scenario.vehicles(vehicle_index).Length;
        width = obj.scenario.vehicles(vehicle_index).Width;

        % get vehicles currently occupied area in vehicle frame
        % repeat first entry at the end to enclose the shape
        x_local_with_offset = [-1, -1, 1, 1, -1] * (length / 2 + obj.scenario.options.offset);
        y_local_with_offset = [-1, 1, 1, -1, -1] * (width / 2 + obj.scenario.options.offset);
        x_local_without_offset = [-1, -1, 1, 1, -1] * (length / 2);
        y_local_without_offset = [-1, 1, 1, -1, -1] * (width / 2);

        % calculate areas in global frame
        [x_global_with_offset, y_global_with_offset] = translate_global( ...
            states_measured(vehicle_index, state_indices.heading), ...
            states_measured(vehicle_index, state_indices.x), ...
            states_measured(vehicle_index, state_indices.y), ...
            x_local_with_offset, ...
            y_local_with_offset ...
        );
        [x_global_without_offset, y_global_without_offset] = translate_global( ...
            states_measured(vehicle_index, state_indices.heading), ...
            states_measured(vehicle_index, state_indices.x), ...
            states_measured(vehicle_index, state_indices.y), ...
            x_local_without_offset, ...
            y_local_without_offset ...
        );

        occupied_area.normal_offset = [x_global_with_offset; y_global_with_offset];
        occupied_area.without_offset = [x_global_without_offset; y_global_without_offset];

        % for initial time step, reachable_sets and predicted areas do not exist yet
        reachable_sets = {};
        predicted_occupied_areas = {};

        % send messages
        obj.traffic_communication{vehicle_index}.send_message( ...
            obj.k, ...
            states_measured(vehicle_index, :), ...
            trims_measured(vehicle_index), ...
            predicted_lanelets, ...
            occupied_area, ...
            reachable_sets ...
        );
        obj.predictions_communication{vehicle_index}.send_message( ...
            obj.k, ...
            predicted_occupied_areas ...
        );
    end

    % for synchronization read from all other controllers
    % to ensure that they are ready
    for vehicle_index = obj.plant.indices_in_vehicle_list
        % loop over vehicles that read messages
        other_vehicles = setdiff(1:obj.scenario.options.amount, vehicle_index);

        for vehicle_index_subscribed = other_vehicles
            % loop over controllers that are subscribed
            obj.traffic_communication{vehicle_index}.read_message( ...
                obj.plant.all_vehicle_ids(vehicle_index_subscribed), ...
                obj.k, ...
                true, ...
                40.0 ...
            );
            obj.predictions_communication{vehicle_index}.read_message( ...
                obj.plant.all_vehicle_ids(vehicle_index_subscribed), ...
                obj.k, ...
                true, ...
                40.0 ...
            );
        end

    end

end
