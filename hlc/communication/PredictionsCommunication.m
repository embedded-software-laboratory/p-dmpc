classdef PredictionsCommunication < InterHlcCommunication
    % communication class for predictions message

    properties

    end

    methods

        function obj = PredictionsCommunication( ...
                vehicle_index, ...
                ros2_node, ...
                topic_name, ...
                message_type ...
            )

            arguments
                vehicle_index (1, 1) double
                ros2_node (1, 1) ros2node
                topic_name (1, :) char
                message_type (1, :) char
            end

            % create communication class to connect to ROS2 network
            % call superclass constructor
            obj = obj@InterHlcCommunication( ...
                vehicle_index, ...
                ros2_node, ...
                topic_name, ...
                message_type ...
            );
        end

        function send_message( ...
                obj, ...
                time_step, ...
                predicted_areas, ...
                needs_fallback, ...
                fallbacks_considered, ...
                priority_permutation ...
            )

            arguments
                obj (1, 1) PredictionsCommunication
                time_step (1, 1) double
                predicted_areas (1, :) cell
                needs_fallback (1, 1) logical = false
                fallbacks_considered (:, 1) double = []
                priority_permutation (1, 1) double = 0
            end

            % vehicle send message to its topic
            obj.message_to_be_sent.time_step = int32(time_step);
            obj.message_to_be_sent.vehicle_index = int32(obj.vehicle_index);
            obj.message_to_be_sent.needs_fallback = needs_fallback;
            obj.message_to_be_sent.fallbacks_considered = int32(fallbacks_considered);

            for i = 1:length(predicted_areas)
                obj.message_to_be_sent.predicted_areas(i).x = predicted_areas{i}(1, :)';
                obj.message_to_be_sent.predicted_areas(i).y = predicted_areas{i}(2, :)';
            end

            obj.message_to_be_sent.priority_permutation = int32(priority_permutation);

            send(obj.ros2_publisher, obj.message_to_be_sent);
        end

        function tf = is_msg_outdated( ...
                obj, ...
                message_received ...
            )

            tf = ...
                ([obj.messages_stored.vehicle_index] == ...
                message_received.vehicle_index) & ...
                ([obj.messages_stored.time_step] == ...
                message_received.time_step) & ...
                ([obj.messages_stored.priority_permutation] == ...
                message_received.priority_permutation);
        end

        function tf = is_found_message( ...
                obj, ...
                vehicle_index_subscribed, ...
                time_step, ...
                priority_permutation ...
            )

            arguments
                obj (1, 1) InterHlcCommunication
                vehicle_index_subscribed (1, 1) double
                time_step (1, 1) double
                priority_permutation (1, 1) double = 0
            end

            tf = ...
                [obj.messages_stored.vehicle_index] == ...
                int32(vehicle_index_subscribed) & ...
                [obj.messages_stored.time_step] == ...
                int32(time_step) & ...
                [obj.messages_stored.priority_permutation] == ...
                int32(priority_permutation);

        end

    end

end
