function eval_prioritization(optional)

    arguments
        optional.computation_mode (1, 1) ComputationMode = ComputationMode.parallel_physically
        optional.scenarios (1, :) ScenarioType = [ScenarioType.commonroad, ScenarioType.circle]
        optional.optimizers (1, :) OptimizerType = [OptimizerType.MatlabOptimal, OptimizerType.MatlabSampled]
        optional.Hp (1, 1) double = 6;
        optional.base_folder string = fullfile(FileNameConstructor.all_results(), 'phd');
    end

    priority_strategies = [
                           PriorityStrategies.constant_priority
                           PriorityStrategies.random_priority
                           PriorityStrategies.coloring_priority
                           PriorityStrategies.FCA_priority
                           PriorityStrategies.explorative_priority
                           PriorityStrategies.optimal_priority
                           ];

    priority_names = [
                      "$p_{\mathrm{constant}}$"
                      "$p_{\mathrm{random}}$"
                      "$p_{\mathrm{color}}$"
                      "$p_{\mathrm{constraint}}$"
                      "$p_{\mathrm{explore}}$"
                      "$p_{\mathrm{optimal}}$"
                      ];

    scenarios = optional.scenarios;
    optimizers = optional.optimizers;

    if (optional.Hp == 6)
        base_folder_prioritization = fullfile(optional.base_folder, 'prioritization');
    else
        base_folder_prioritization = fullfile(optional.base_folder, sprintf('prioritization_Hp%d', optional.Hp));
        priority_strategies = priority_strategies(1:end - 1);
        priority_names = priority_names(1:end - 1);
    end

    [is_base_folder, ~] = mkdir(base_folder_prioritization);
    assert(is_base_folder);

    for scenario = scenarios

        for optimizer = optimizers
            % Generate results
            experiment_results = eval_experiments( ...
                computation_mode = optional.computation_mode, ...
                scenario_type = scenario, ...
                optimizer = optimizer, ...
                priority_strategies = priority_strategies, ...
                Hp = optional.Hp ...
            );
            %%
            %     __  _______  ___
            %    /  |/  / __ \/   |
            %   / /|_/ / /_/ / /| |
            %  / /  / / ____/ ___ |
            % /_/  /_/_/   /_/  |_|

            figure(visible = 'off');
            export_plot(@plot_mpa, experiment_results(1), file_path = fullfile(optional.base_folder, 'mpa.pdf'));
            close all;

            % data export
            mpa = MotionPrimitiveAutomaton(experiment_results(1).options);
            writetable(struct2table(mpa.trims), fullfile(optional.base_folder, '5-mpa-trims.dat'));
            adjacency = mpa.transition_matrix_single(:, :, 1);
            writelines(matrix_to_pgf_array(adjacency), fullfile(optional.base_folder, 'mpa-adjacency.dat'));

            %%
            %    ______           __
            %   / ____/___  _____/ /_
            %  / /   / __ \/ ___/ __/
            % / /___/ /_/ (__  ) /_
            % \____/\____/____/\__/

            cost_percent_average = data_cost_percent(experiment_results);

            figure(visible = 'off');
            filename = sprintf('6-prioritization_cost_%s_%s.pdf', scenario, optimizer);
            export_plot( ...
                @series_plot_value, ...
                experiment_results, ...
                cost_percent_average, ...
                priority_names, ...
                file_path = fullfile(base_folder_prioritization, filename) ...
            );
            close all;

            % data export
            n_vehicles = [experiment_results(:, 1, 1).n_hlc]';
            cost_table = array2table([n_vehicles, cost_percent_average], ...
                VariableNames = ["N_A"; priority_names] ...
            );
            filename = sprintf('6-prioritization_cost_%s_%s.dat', scenario, optimizer);
            writetable(cost_table, fullfile(base_folder_prioritization, filename));

            %%
            %   _______
            %  /_  __(_)___ ___  ___
            %   / / / / __ `__ \/ _ \
            %  / / / / / / / / /  __/
            % /_/ /_/_/ /_/ /_/\___/
            [~, time_med_approach_vehicle, ~, time_max_approach_vehicle] = data_time_approach_vehicle( ...
                experiment_results, ...
                computation_time_function = @data_time_prioritize_optimize_experiment ...
            );

            % Remove optimal priority, scale to ms
            series_time_max_ms = time_max_approach_vehicle' .* 1000;
            series_time_med_ms = time_med_approach_vehicle' .* 1000;

            fig = figure(visible = 'off');
            series_plot_med_max( ...
                experiment_results, ...
                series_time_med_ms, ...
                series_time_max_ms, ...
                priority_names, ...
                export_fig_config = ExportFigConfig.paper(paperheight = 6) ...
            );
            ylim([0, 300]);

            txt_med_max = {
                           sprintf("med: % 5.0f", round(series_time_med_ms(2, end)))
                           sprintf("max: %5.0f", round(series_time_max_ms(2, end)))
                           };
            text( ...
                11.8, 250, ...
                txt_med_max, ...
                HorizontalAlignment = 'center', ...
                Interpreter = 'latex', ...
                FontSize = ExportFigConfig.paper.fontsize - 1, ...
                BackgroundColor = [1 1 1 0.8], ...
                Margin = 1 ...
            );

            filename = sprintf('6-prioritization_time_%s_%s.pdf', scenario, optimizer);
            export_fig(fig, fullfile(base_folder_prioritization, filename));
            close all;

            % data export
            filename = sprintf('6-prioritization_time_med_%s_%s.dat', scenario, optimizer);
            writetable( ...
                array2table( ...
                [n_vehicles, series_time_med_ms], ...
                VariableNames = ["N_A"; priority_names] ...
            ), ...
                fullfile(base_folder_prioritization, filename) ...
            );

            filename = sprintf('6-prioritization_time_max_%s_%s.dat', scenario, optimizer);
            writetable( ...
                array2table( ...
                [n_vehicles, series_time_max_ms], ...
                VariableNames = ["N_A"; priority_names] ...
            ), ...
                fullfile(base_folder_prioritization, filename) ...
            );

            %%
            %     __                   __
            %    / /   ___ _   _____  / /____
            %   / /   / _ \ | / / _ \/ / ___/
            %  / /___/  __/ |/ /  __/ (__  )
            % /_____/\___/|___/\___/_/____/

            [~, n_levels_med_approach_vehicle, ~, n_levels_max_approach_vehicle] = data_n_levels_approach_vehicle(experiment_results(:, :, :));

            fig = figure(visible = 'off');
            series_plot_med_max( ...
                experiment_results, ...
                n_levels_med_approach_vehicle, ...
                n_levels_max_approach_vehicle, ...
                priority_names, ...
                ylabel = "$N_{c}$", ...
                export_fig_config = ExportFigConfig.paper(paperheight = 6) ...
            );
            filename = sprintf('6-prioritization_n_levels_%s_%s.pdf', scenario, optimizer);
            export_fig(fig, fullfile(base_folder_prioritization, filename));
            close all;

            % data export
            filename = sprintf('6-prioritization_n_levels_med_%s_%s.dat', scenario, optimizer);
            writetable( ...
                array2table( ...
                [n_vehicles, n_levels_med_approach_vehicle'], ...
                VariableNames = ["N_A"; priority_names] ...
            ), ...
                fullfile(base_folder_prioritization, filename) ...
            );

            filename = sprintf('6-prioritization_n_levels_max_%s_%s.dat', scenario, optimizer);
            writetable( ...
                array2table( ...
                [n_vehicles, n_levels_max_approach_vehicle'], ...
                VariableNames = ["N_A"; priority_names] ...
            ), ...
                fullfile(base_folder_prioritization, filename) ...
            );

            %%
            %   _______                   _____ __
            %  /_  __(_)___ ___  ___     / ___// /____  ____
            %   / / / / __ `__ \/ _ \    \__ \/ __/ _ \/ __ \
            %  / / / / / / / / /  __/   ___/ / /_/  __/ /_/ /
            % /_/ /_/_/ /_/ /_/\___/   /____/\__/\___/ .___/
            %                                       /_/

            i_n_vehicles = 3; % 15 vehicles
            i_priority = 5; % Explorative priority
            i_scenario = 1;
            k = 1;
            filename = sprintf('6-prioritization_time_for_step_%s_%s_%s_%d.pdf', scenario, optimizer, priority_strategies(i_priority), experiment_results(i_n_vehicles, i_priority, i_scenario).options.amount);
            figure(Visible = 'off');
            export_plot( ...
                @plot_computation_time_for_step, ...
                experiment_results(i_n_vehicles, i_priority, i_scenario), ...
                k, ...
                export_fig_config = ExportFigConfig.paper(), ...
                file_path = fullfile(base_folder_prioritization, filename) ...
            );
            close all;

            %%
            %    _____                        __          __
            %   / ___/____  ____ _____  _____/ /_  ____  / /______
            %   \__ \/ __ \/ __ `/ __ \/ ___/ __ \/ __ \/ __/ ___/
            %  ___/ / / / / /_/ / /_/ (__  ) / / / /_/ / /_(__  )
            % /____/_/ /_/\__,_/ .___/____/_/ /_/\____/\__/____/
            %                 /_/

            for experiment_result = experiment_results(:)'

                if (experiment_result.hlc_indices == -1)
                    continue;
                end

                % Plotting
                step_size = round((experiment_result.n_steps + 1) / 6);
                start_step = experiment_result.n_steps - step_size * 5;

                folder_subpath = fullfile( ...
                    char(scenario), ...
                    sprintf("%02d", experiment_result.options.amount), ...
                    char(experiment_result.options.priority) ...
                );
                experiment_folder = fullfile( ...
                    base_folder_prioritization, ...
                    folder_subpath ...
                );
                [~, ~] = mkdir(experiment_folder);
                plot_experiment_snapshots( ...
                    experiment_result, ...
                    start_step:step_size:experiment_result.n_steps, ...
                    do_export = true, ...
                    base_folder = experiment_folder, ...
                    n_figure_cols = 2 ...
                );

                % data export for situations
                steps = 5:5:experiment_result.n_steps;
                filebase = sprintf( ...
                    '6-%d_%s_seed%d_%s', ...
                    experiment_result.options.amount, ...
                    char(experiment_result.options.scenario_type), ...
                    mod(prod(experiment_result.options.path_ids), 61), ...
                    char(experiment_result.options.priority) ...
                );

                for i_step = 1:length(steps)
                    step = steps(i_step);
                    filebase_step = sprintf('%s_k%d', filebase, step);

                    % vehicle poses
                    poses = experiment_result.iteration_data(step).x0(:, 1:3);
                    writetable( ...
                        array2table(poses, VariableNames = ["x", "y", "psi"]), ...
                        fullfile(experiment_folder, strcat(filebase_step, '_poses.dat')) ...
                    );

                    % references per vehicle
                    references = [ ...
                                      experiment_result.iteration_data(step).reference_trajectory_points(:, :, 1)', ...
                                      experiment_result.iteration_data(step).reference_trajectory_points(:, :, 2)' ...
                                  ];

                    variable_names = [string("x" + (1:experiment_result.options.amount)), string("y" + (1:experiment_result.options.amount))];
                    writetable( ...
                        array2table(references, VariableNames = variable_names), ...
                        fullfile(experiment_folder, strcat(filebase_step, '_references.dat')) ...
                    );
                    % predictions per vehicle
                    % add current position of all vehicles
                    predictions = [poses(:, 1)', poses(:, 2)'];
                    all_predictions = vertcat(experiment_result.control_results_info(:, step).y_predicted);
                    predictions = [ ...
                                       predictions;
                                   all_predictions(1:3:end, :)', ...
                                       all_predictions(2:3:end, :)' ...
                                   ]; %#ok<AGROW>

                    variable_names = [string("x" + (1:experiment_result.options.amount)), string("y" + (1:experiment_result.options.amount))];
                    writetable( ...
                        array2table(predictions, VariableNames = variable_names), ...
                        fullfile(experiment_folder, strcat(filebase_step, '_predictions.dat')) ...
                    );
                    % coupling_sequential
                    coupling_sequential = experiment_result.iteration_data(step).directed_coupling_sequential;
                    writelines( ...
                        matrix_to_pgf_array(coupling_sequential), ...
                        fullfile(experiment_folder, strcat(filebase_step, '_coupling_sequential.dat')) ...
                    );
                    % coupling_parallel
                    coupling_parallel = experiment_result.iteration_data(step).directed_coupling - experiment_result.iteration_data(step).directed_coupling_sequential;
                    writelines( ...
                        matrix_to_pgf_array(coupling_parallel), ...
                        fullfile(experiment_folder, strcat(filebase_step, '_coupling_parallel.dat')) ...
                    );
                end

            end

        end

    end

end
